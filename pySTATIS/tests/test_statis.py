from __future__ import print_function

import numpy as np

from .. import get_wine_data
from ..decomposition import rv_pca, get_M, get_A, stack_tables, aniso_c1, get_col_indices, gsvd
from ..helpers import get_groups, get_ids


def test_RvPCA():
    data = get_wine_data()
    for d in data:
        d.cross_product()

    n_datasets = len(data)

    expected_output = np.array([[0.10360263],
                                [0.10363524],
                                [0.09208477],
                                [0.10370834],
                                [0.08063234],
                                [0.09907428],
                                [0.09353886],
                                [0.08881811],
                                [0.1110871],
                                [0.12381833]])
    output = rv_pca(data, n_datasets)

    np.testing.assert_array_almost_equal(output, expected_output)


def test_getM():
    expected_output = np.eye(10) / 10

    np.testing.assert_array_almost_equal(get_M(10), expected_output)


def test_getA_aniso_c1():
    weights = np.arange(10)
    expected_output = np.diag(weights)

    output = get_A(data=None, table_weights=weights, n_datasets=0, flavor='ANISOSTATIS')

    np.testing.assert_almost_equal(output, expected_output)


def test_getA_STATIS():
    weights = np.array([[0.10360263],
                        [0.10363524],
                        [0.09208477],
                        [0.10370834],
                        [0.08063234],
                        [0.09907428],
                        [0.09353886],
                        [0.08881811],
                        [0.1110871],
                        [0.12381833]])
    data = get_wine_data()
    n_datasets = len(data)

    expected_output = np.diag(np.array([0.10360263, 0.10360263, 0.10360263, 0.10360263, 0.10360263,
                                        0.10360263, 0.10363524, 0.10363524, 0.10363524, 0.10363524,
                                        0.10363524, 0.10363524, 0.09208477, 0.09208477, 0.09208477,
                                        0.09208477, 0.09208477, 0.09208477, 0.10370834, 0.10370834,
                                        0.10370834, 0.10370834, 0.10370834, 0.08063234, 0.08063234,
                                        0.08063234, 0.08063234, 0.08063234, 0.08063234, 0.09907428,
                                        0.09907428, 0.09907428, 0.09907428, 0.09907428, 0.09353886,
                                        0.09353886, 0.09353886, 0.09353886, 0.08881811, 0.08881811,
                                        0.08881811, 0.08881811, 0.08881811, 0.08881811, 0.1110871,
                                        0.1110871, 0.1110871, 0.1110871, 0.1110871, 0.12381833,
                                        0.12381833, 0.12381833, 0.12381833]))

    output = get_A(data=data, table_weights=weights, n_datasets=n_datasets, flavor='STATIS')

    np.testing.assert_almost_equal(output, expected_output)


def test_stack_tables():
    data = get_wine_data()

    expected_output1 = np.array([[0.12074361, 0.13176157, 0.07231015, -0.03653108, -0.18013905,
                                  0.11075572, 0.14106286, 0.14133525, 0.1111874, -0.1363375,
                                  0.09518769, -0.0379049],
                                 [0.06501579, 0.05270463, 0.12654277, -0.18265538, -0.12471165,
                                  0.23158014, 0.02432118, 0.05207088, 0.01235416, -0.1363375,
                                  0.09518769, 0.11371471],
                                 [0.00928797, 0.05270463, 0.01807754, 0.01217703, -0.06928425,
                                  -0.0100687, 0.02432118, 0.14133525, 0.01235416, -0.0054535,
                                  0.16237901, 0.11371471],
                                 [0.17647143, 0.13176157, 0.12654277, -0.03653108, -0.06928425,
                                  0.05034351, 0.14106286, 0.14133525, 0.1111874, -0.0708955,
                                  0.02799638, 0.0379049],
                                 [-0.21362331, -0.1844662, -0.19885292, 0.15830133, 0.15242535,
                                  -0.07048091, -0.20916218, -0.12645786, -0.23472895, 0.1254305,
                                  -0.10638625, -0.18952451],
                                 [-0.15789549, -0.02635231, -0.09038769, 0.20700944, 0.09699795,
                                  -0.19130533, -0.0924205, -0.12645786, -0.08647909, 0.2563145,
                                  -0.17357756, -0.0379049],
                                 [-0.04643985, -0.10540926, -0.03615508, -0.03653108, 0.20785275,
                                  -0.07048091, -0.15079134, -0.12645786, -0.18531233, 0.1254305,
                                  -0.10638625, -0.11371471],
                                 [-0.04643985, -0.1844662, -0.09038769, 0.15830133, 0.15242535,
                                  -0.0100687, -0.0924205, -0.12645786, -0.03706247, -0.0054535,
                                  -0.17357756, -0.18952451],
                                 [0.12074361, 0.13176157, 0.12654277, -0.03653108, -0.01385685,
                                  0.17116793, 0.14106286, 0.14133525, 0.16060402, -0.0054535,
                                  -0.03919493, 0.0379049],
                                 [-0.10216767, 0.13176157, -0.19885292, 0.01217703, -0.06928425,
                                  -0.0100687, -0.03404966, 0.05207088, -0.03706247, 0.0599885,
                                  -0.03919493, 0.18952451],
                                 [0.12074361, -0.02635231, 0.12654277, -0.18265538, -0.06928425,
                                  -0.07048091, 0.14106286, -0.03719349, 0.1111874, -0.1363375,
                                  0.09518769, 0.11371471],
                                 [-0.04643985, -0.10540926, 0.01807754, -0.03653108, -0.01385685,
                                  -0.13089312, -0.03404966, -0.12645786, 0.06177078, -0.0708955,
                                  0.16237901, -0.0379049]])

    expected_output2 = np.array([[0.12074361, 0.13176157, 0.07231015, -0.03653108, -0.18013905,
                                  0.11075572, 0.14106286, 0.14133525, 0.1111874, -0.1363375,
                                  0.09518769, -0.0379049],
                                 [0.06501579, 0.05270463, 0.12654277, -0.18265538, -0.12471165,
                                  0.23158014, 0.02432118, 0.05207088, 0.01235416, -0.1363375,
                                  0.09518769, 0.11371471],
                                 [0.00928797, 0.05270463, 0.01807754, 0.01217703, -0.06928425,
                                  -0.0100687, 0.02432118, 0.14133525, 0.01235416, -0.0054535,
                                  0.16237901, 0.11371471],
                                 [0.17647143, 0.13176157, 0.12654277, -0.03653108, -0.06928425,
                                  0.05034351, 0.14106286, 0.14133525, 0.1111874, -0.0708955,
                                  0.02799638, 0.0379049],
                                 [-0.21362331, -0.1844662, -0.19885292, 0.15830133, 0.15242535,
                                  -0.07048091, -0.20916218, -0.12645786, -0.23472895, 0.1254305,
                                  -0.10638625, -0.18952451],
                                 [-0.15789549, -0.02635231, -0.09038769, 0.20700944, 0.09699795,
                                  -0.19130533, -0.0924205, -0.12645786, -0.08647909, 0.2563145,
                                  -0.17357756, -0.0379049],
                                 [-0.04643985, -0.10540926, -0.03615508, -0.03653108, 0.20785275,
                                  -0.07048091, -0.15079134, -0.12645786, -0.18531233, 0.1254305,
                                  -0.10638625, -0.11371471],
                                 [-0.04643985, -0.1844662, -0.09038769, 0.15830133, 0.15242535,
                                  -0.0100687, -0.0924205, -0.12645786, -0.03706247, -0.0054535,
                                  -0.17357756, -0.18952451],
                                 [0.12074361, 0.13176157, 0.12654277, -0.03653108, -0.01385685,
                                  0.17116793, 0.14106286, 0.14133525, 0.16060402, -0.0054535,
                                  -0.03919493, 0.0379049],
                                 [-0.10216767, 0.13176157, -0.19885292, 0.01217703, -0.06928425,
                                  -0.0100687, -0.03404966, 0.05207088, -0.03706247, 0.0599885,
                                  -0.03919493, 0.18952451],
                                 [0.12074361, -0.02635231, 0.12654277, -0.18265538, -0.06928425,
                                  -0.07048091, 0.14106286, -0.03719349, 0.1111874, -0.1363375,
                                  0.09518769, 0.11371471],
                                 [-0.04643985, -0.10540926, 0.01807754, -0.03653108, -0.01385685,
                                  -0.13089312, -0.03404966, -0.12645786, 0.06177078, -0.0708955,
                                  0.16237901, -0.0379049]])

    o1, o2 = stack_tables(data, 2)

    np.testing.assert_almost_equal(o1, expected_output1)
    np.testing.assert_almost_equal(o2, expected_output2)


def test_aniso_c1():
    data = get_wine_data()
    M = np.eye(12)

    expected_output = np.array([0.0215448, 0.01775173, 0.01739467, 0.01392373, 0.01955581,
                                0.01381154, 0.02199089, 0.02161731, 0.01811179, 0.01597862,
                                0.01350063, 0.01236478, 0.02287732, 0.00519548, 0.01786665,
                                0.01071246, 0.01840058, 0.01693673, 0.02827405, 0.01999554,
                                0.02634451, 0.01576796, 0.01219336, 0.02147136, 0.01183764,
                                0.01794155, 0.00444759, 0.01575042, 0.00762313, 0.0270756,
                                0.02273359, 0.02184447, 0.01587411, 0.01257706, 0.02952263,
                                0.0228765, 0.0292967, 0.01284734, 0.01949484, 0.01582574,
                                0.01376979, 0.00509851, 0.01955197, 0.01371544, 0.02741072,
                                0.01716332, 0.02471343, 0.01799685, 0.02539003, 0.03745016,
                                0.02827519, 0.02965729, 0.02865608])

    X, _ = stack_tables(data, 10)
    output = aniso_c1(X, M)

    np.testing.assert_almost_equal(output, expected_output)


def test_col_indices():
    X = get_wine_data()

    for i in range(5):
        X[i].groups = ('A1', 'B1')

    for i in range(5, 10):
        X[i].groups = ('A1', 'B2')

    ids = get_ids(X)
    groups, ugroups, _ = get_groups(X)

    expected_output1 = [np.array([0, 1, 2, 3, 4, 5]),
                        np.array([6, 7, 8, 9, 10, 11]),
                        np.array([12, 13, 14, 15, 16, 17]),
                        np.array([18, 19, 20, 21, 22]),
                        np.array([23, 24, 25, 26, 27, 28]),
                        np.array([29, 30, 31, 32, 33]),
                        np.array([34, 35, 36, 37]),
                        np.array([38, 39, 40, 41, 42, 43]),
                        np.array([44, 45, 46, 47, 48]),
                        np.array([49, 50, 51, 52])]

    expected_output2 = [[np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                                   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                                   34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                                   51, 52])],
                        [np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                                   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),
                         np.array([29, 30, 31, 32, 33,
                                   34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                                   51, 52])]]

    o1, o2 = get_col_indices(X, ids, groups, ugroups)

    for i, o in enumerate(o1):
        np.testing.assert_almost_equal(o, expected_output1[i])

    for i, o in enumerate(o2):
        if len(o) is 1:
            np.testing.assert_almost_equal(o, expected_output2[i])
        elif len(o) > 1:
            for j, o_ in enumerate(o):
                np.testing.assert_almost_equal(o_, expected_output2[i][j])


def test_gsvd():
    X = get_wine_data()

    n_obs = X[0].data.shape[0]

    M = get_M(n_obs)
    X_, _ = stack_tables(X, 10)

    table_weights = aniso_c1(X_, M)

    A = get_A(X_, table_weights, 10, 'ANISOSTATIS_C1')

    expected_P = np.array([[-1.12532966, 0.55340946],
                           [-0.87937021, 0.09247991],
                           [-0.853192, -1.26247727],
                           [-1.26709551, -0.69022112],
                           [1.57101117, -0.43865541],
                           [1.36366412, -0.05229269],
                           [0.98839807, 0.62669105],
                           [0.99038654, 0.94253934],
                           [-0.87146943, 0.96317282],
                           [0.14416768, -2.20740294],
                           [-0.55940822, 1.52815497],
                           [0.49823746, -0.05539813]])

    expected_D = np.array([1.05505769e-01, 3.95762599e-02])

    expected_Q = np.array([[-1.00944882, 1.04713859],
                           [-0.91050677, -0.91741448],
                           [-0.89257167, 1.42944258],
                           [0.79526143, -0.67462139],
                           [0.96468921, 0.54860627],
                           [-0.798634, 0.2833546],
                           [-1.0256455, 0.62263794],
                           [-1.01393935, -0.75372129],
                           [-0.92467136, 0.69432552],
                           [0.85880003, -0.77758603],
                           [-0.78161016, -0.32035294],
                           [-0.74255992, -1.16008148],
                           [-1.0466031, 0.75005952],
                           [-0.44590052, -0.74899251],
                           [-0.9063831, 1.21194215],
                           [0.6852046, -1.25308019],
                           [-0.92735922, -1.11294167],
                           [0.88500034, 1.08962302],
                           [-1.16728814, 0.22024091],
                           [-0.95495292, -1.53750461],
                           [-1.12220783, -0.76912816],
                           [0.8540115, 0.19294252],
                           [-0.73003442, -0.4952201],
                           [-1.01386827, 0.59674839],
                           [-0.72096007, -1.0967327],
                           [-0.91856095, 0.93730254],
                           [0.40070166, 0.43057353],
                           [-0.85387345, -0.59177455],
                           [0.55596801, 0.01709016],
                           [-1.13830806, 0.71741181],
                           [-1.03256254, -1.18248631],
                           [-1.01017087, 1.16985983],
                           [0.85249341, -0.05494635],
                           [-0.74363048, -1.30847934],
                           [-1.17283692, 1.58368837],
                           [-1.0120364, -1.91512238],
                           [-1.17326479, 1.23458184],
                           [0.71616099, 1.57433808],
                           [-0.9568168, 0.96446752],
                           [-0.84248713, -1.48687487],
                           [-0.7931912, 0.74215694],
                           [0.43968008, -0.62420879],
                           [-0.96013389, -0.96211351],
                           [0.78511489, 1.16364004],
                           [-1.14415195, 0.91608585],
                           [-0.88023165, -1.07752342],
                           [-1.08403614, 0.80059941],
                           [0.91582591, -0.28235425],
                           [-1.09949241, -0.92932116],
                           [-1.34557527, 0.3045375],
                           [-1.14743668, -1.3552183],
                           [-1.18194743, 0.89044173],
                           [1.15875546, 1.31743638]])

    expected_ev = np.array([1.11314672e-02, 1.56628035e-03])

    P_, D_, Q_, ev_ = gsvd(X_, M, A, 2)

    np.testing.assert_almost_equal(P_, expected_P)
    np.testing.assert_almost_equal(D_, expected_D)
    np.testing.assert_almost_equal(Q_, expected_Q)
    np.testing.assert_almost_equal(ev_, expected_ev)

