from __future__ import print_function

import numpy as np

from .. import get_wine_data
from ..decomposition import rv_pca, get_M, get_A_STATIS, get_A_ANISOSTATIS, stack_tables, aniso_c1, get_col_indices, \
    gsvd
from ..helpers import get_groups, get_ids, gen_affinity_input
from ..contrib import calc_factor_scores, calc_partial_interia_dat, calc_contrib_dat, calc_contrib_var, \
    calc_contrib_obs, calc_partial_factor_scores


def test_RvPCA():
    data = get_wine_data()
    for d in data:
        d.cross_product()

    n_datasets = len(data)

    expected_output = np.array([[0.10360263],
                                [0.10363524],
                                [0.09208477],
                                [0.10370834],
                                [0.08063234],
                                [0.09907428],
                                [0.09353886],
                                [0.08881811],
                                [0.1110871],
                                [0.12381833]])
    output, _, _ = rv_pca(data, n_datasets)

    np.testing.assert_array_almost_equal(np.atleast_2d(output).T, expected_output)


def test_getM():
    expected_output = np.eye(10) / 10

    np.testing.assert_array_almost_equal(get_M(10), expected_output)


def test_getA_aniso_c1():
    weights = np.arange(10)
    expected_output = np.diag(weights)

    output = get_A_ANISOSTATIS(table_weights=weights)

    np.testing.assert_almost_equal(output, expected_output)


def test_getA_STATIS():
    weights = np.array([[0.10360263],
                        [0.10363524],
                        [0.09208477],
                        [0.10370834],
                        [0.08063234],
                        [0.09907428],
                        [0.09353886],
                        [0.08881811],
                        [0.1110871],
                        [0.12381833]])
    data = get_wine_data()
    n_datasets = len(data)

    expected_output = np.diag(np.array([0.10360263, 0.10360263, 0.10360263, 0.10360263, 0.10360263,
                                        0.10360263, 0.10363524, 0.10363524, 0.10363524, 0.10363524,
                                        0.10363524, 0.10363524, 0.09208477, 0.09208477, 0.09208477,
                                        0.09208477, 0.09208477, 0.09208477, 0.10370834, 0.10370834,
                                        0.10370834, 0.10370834, 0.10370834, 0.08063234, 0.08063234,
                                        0.08063234, 0.08063234, 0.08063234, 0.08063234, 0.09907428,
                                        0.09907428, 0.09907428, 0.09907428, 0.09907428, 0.09353886,
                                        0.09353886, 0.09353886, 0.09353886, 0.08881811, 0.08881811,
                                        0.08881811, 0.08881811, 0.08881811, 0.08881811, 0.1110871,
                                        0.1110871, 0.1110871, 0.1110871, 0.1110871, 0.12381833,
                                        0.12381833, 0.12381833, 0.12381833]))

    output = get_A_STATIS(data=data, table_weights=weights, n_datasets=n_datasets)

    np.testing.assert_almost_equal(output, expected_output)


def test_stack_tables():
    data = get_wine_data()

    expected_output1 = np.array([[0.12074361, 0.13176157, 0.07231015, -0.03653108, -0.18013905,
                                  0.11075572, 0.14106286, 0.14133525, 0.1111874, -0.1363375,
                                  0.09518769, -0.0379049],
                                 [0.06501579, 0.05270463, 0.12654277, -0.18265538, -0.12471165,
                                  0.23158014, 0.02432118, 0.05207088, 0.01235416, -0.1363375,
                                  0.09518769, 0.11371471],
                                 [0.00928797, 0.05270463, 0.01807754, 0.01217703, -0.06928425,
                                  -0.0100687, 0.02432118, 0.14133525, 0.01235416, -0.0054535,
                                  0.16237901, 0.11371471],
                                 [0.17647143, 0.13176157, 0.12654277, -0.03653108, -0.06928425,
                                  0.05034351, 0.14106286, 0.14133525, 0.1111874, -0.0708955,
                                  0.02799638, 0.0379049],
                                 [-0.21362331, -0.1844662, -0.19885292, 0.15830133, 0.15242535,
                                  -0.07048091, -0.20916218, -0.12645786, -0.23472895, 0.1254305,
                                  -0.10638625, -0.18952451],
                                 [-0.15789549, -0.02635231, -0.09038769, 0.20700944, 0.09699795,
                                  -0.19130533, -0.0924205, -0.12645786, -0.08647909, 0.2563145,
                                  -0.17357756, -0.0379049],
                                 [-0.04643985, -0.10540926, -0.03615508, -0.03653108, 0.20785275,
                                  -0.07048091, -0.15079134, -0.12645786, -0.18531233, 0.1254305,
                                  -0.10638625, -0.11371471],
                                 [-0.04643985, -0.1844662, -0.09038769, 0.15830133, 0.15242535,
                                  -0.0100687, -0.0924205, -0.12645786, -0.03706247, -0.0054535,
                                  -0.17357756, -0.18952451],
                                 [0.12074361, 0.13176157, 0.12654277, -0.03653108, -0.01385685,
                                  0.17116793, 0.14106286, 0.14133525, 0.16060402, -0.0054535,
                                  -0.03919493, 0.0379049],
                                 [-0.10216767, 0.13176157, -0.19885292, 0.01217703, -0.06928425,
                                  -0.0100687, -0.03404966, 0.05207088, -0.03706247, 0.0599885,
                                  -0.03919493, 0.18952451],
                                 [0.12074361, -0.02635231, 0.12654277, -0.18265538, -0.06928425,
                                  -0.07048091, 0.14106286, -0.03719349, 0.1111874, -0.1363375,
                                  0.09518769, 0.11371471],
                                 [-0.04643985, -0.10540926, 0.01807754, -0.03653108, -0.01385685,
                                  -0.13089312, -0.03404966, -0.12645786, 0.06177078, -0.0708955,
                                  0.16237901, -0.0379049]])

    expected_output2 = np.array([[0.12074361, 0.13176157, 0.07231015, -0.03653108, -0.18013905,
                                  0.11075572, 0.14106286, 0.14133525, 0.1111874, -0.1363375,
                                  0.09518769, -0.0379049],
                                 [0.06501579, 0.05270463, 0.12654277, -0.18265538, -0.12471165,
                                  0.23158014, 0.02432118, 0.05207088, 0.01235416, -0.1363375,
                                  0.09518769, 0.11371471],
                                 [0.00928797, 0.05270463, 0.01807754, 0.01217703, -0.06928425,
                                  -0.0100687, 0.02432118, 0.14133525, 0.01235416, -0.0054535,
                                  0.16237901, 0.11371471],
                                 [0.17647143, 0.13176157, 0.12654277, -0.03653108, -0.06928425,
                                  0.05034351, 0.14106286, 0.14133525, 0.1111874, -0.0708955,
                                  0.02799638, 0.0379049],
                                 [-0.21362331, -0.1844662, -0.19885292, 0.15830133, 0.15242535,
                                  -0.07048091, -0.20916218, -0.12645786, -0.23472895, 0.1254305,
                                  -0.10638625, -0.18952451],
                                 [-0.15789549, -0.02635231, -0.09038769, 0.20700944, 0.09699795,
                                  -0.19130533, -0.0924205, -0.12645786, -0.08647909, 0.2563145,
                                  -0.17357756, -0.0379049],
                                 [-0.04643985, -0.10540926, -0.03615508, -0.03653108, 0.20785275,
                                  -0.07048091, -0.15079134, -0.12645786, -0.18531233, 0.1254305,
                                  -0.10638625, -0.11371471],
                                 [-0.04643985, -0.1844662, -0.09038769, 0.15830133, 0.15242535,
                                  -0.0100687, -0.0924205, -0.12645786, -0.03706247, -0.0054535,
                                  -0.17357756, -0.18952451],
                                 [0.12074361, 0.13176157, 0.12654277, -0.03653108, -0.01385685,
                                  0.17116793, 0.14106286, 0.14133525, 0.16060402, -0.0054535,
                                  -0.03919493, 0.0379049],
                                 [-0.10216767, 0.13176157, -0.19885292, 0.01217703, -0.06928425,
                                  -0.0100687, -0.03404966, 0.05207088, -0.03706247, 0.0599885,
                                  -0.03919493, 0.18952451],
                                 [0.12074361, -0.02635231, 0.12654277, -0.18265538, -0.06928425,
                                  -0.07048091, 0.14106286, -0.03719349, 0.1111874, -0.1363375,
                                  0.09518769, 0.11371471],
                                 [-0.04643985, -0.10540926, 0.01807754, -0.03653108, -0.01385685,
                                  -0.13089312, -0.03404966, -0.12645786, 0.06177078, -0.0708955,
                                  0.16237901, -0.0379049]])

    o1, o2 = stack_tables(data, 2)

    np.testing.assert_almost_equal(o1, expected_output1)
    np.testing.assert_almost_equal(o2, expected_output2)


def test_aniso_c1():
    data = get_wine_data()
    M = np.eye(12)

    expected_output = np.array([0.0215448, 0.01775173, 0.01739467, 0.01392373, 0.01955581,
                                0.01381154, 0.02199089, 0.02161731, 0.01811179, 0.01597862,
                                0.01350063, 0.01236478, 0.02287732, 0.00519548, 0.01786665,
                                0.01071246, 0.01840058, 0.01693673, 0.02827405, 0.01999554,
                                0.02634451, 0.01576796, 0.01219336, 0.02147136, 0.01183764,
                                0.01794155, 0.00444759, 0.01575042, 0.00762313, 0.0270756,
                                0.02273359, 0.02184447, 0.01587411, 0.01257706, 0.02952263,
                                0.0228765, 0.0292967, 0.01284734, 0.01949484, 0.01582574,
                                0.01376979, 0.00509851, 0.01955197, 0.01371544, 0.02741072,
                                0.01716332, 0.02471343, 0.01799685, 0.02539003, 0.03745016,
                                0.02827519, 0.02965729, 0.02865608])

    X, _ = stack_tables(data, 10)
    output, _ = aniso_c1(X, M)

    np.testing.assert_almost_equal(output, expected_output)


def test_col_indices():
    X = get_wine_data()

    for i in range(5):
        X[i].groups = ('A1', 'B1')

    for i in range(5, 10):
        X[i].groups = ('A1', 'B2')

    ids = get_ids(X)
    groups, ugroups, _ = get_groups(X)

    expected_output1 = [np.array([0, 1, 2, 3, 4, 5]),
                        np.array([6, 7, 8, 9, 10, 11]),
                        np.array([12, 13, 14, 15, 16, 17]),
                        np.array([18, 19, 20, 21, 22]),
                        np.array([23, 24, 25, 26, 27, 28]),
                        np.array([29, 30, 31, 32, 33]),
                        np.array([34, 35, 36, 37]),
                        np.array([38, 39, 40, 41, 42, 43]),
                        np.array([44, 45, 46, 47, 48]),
                        np.array([49, 50, 51, 52])]

    expected_output2 = [[np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                                   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                                   34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                                   51, 52])],
                        [np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                                   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]),
                         np.array([29, 30, 31, 32, 33,
                                   34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                                   51, 52])]]

    o1, o2 = get_col_indices(X, ids, groups, ugroups)

    for i, o in enumerate(o1):
        np.testing.assert_almost_equal(o, expected_output1[i])

    for i, o in enumerate(o2):
        if len(o) is 1:
            np.testing.assert_almost_equal(o, expected_output2[i])
        elif len(o) > 1:
            for j, o_ in enumerate(o):
                np.testing.assert_almost_equal(o_, expected_output2[i][j])


def test_gsvd():
    X = get_wine_data()

    n_obs = X[0].data.shape[0]

    M = get_M(n_obs)
    X_, _ = stack_tables(X, 10)

    table_weights, _ = aniso_c1(X_, M)

    A = get_A_ANISOSTATIS(table_weights)

    expected_P = np.array([[-1.12532966, 0.55340946],
                           [-0.87937021, 0.09247991],
                           [-0.853192, -1.26247727],
                           [-1.26709551, -0.69022112],
                           [1.57101117, -0.43865541],
                           [1.36366412, -0.05229269],
                           [0.98839807, 0.62669105],
                           [0.99038654, 0.94253934],
                           [-0.87146943, 0.96317282],
                           [0.14416768, -2.20740294],
                           [-0.55940822, 1.52815497],
                           [0.49823746, -0.05539813]])

    expected_D = np.array([1.05505769e-01, 3.95762599e-02])

    expected_Q = np.array([[-1.00944882, 1.04713859],
                           [-0.91050677, -0.91741448],
                           [-0.89257167, 1.42944258],
                           [0.79526143, -0.67462139],
                           [0.96468921, 0.54860627],
                           [-0.798634, 0.2833546],
                           [-1.0256455, 0.62263794],
                           [-1.01393935, -0.75372129],
                           [-0.92467136, 0.69432552],
                           [0.85880003, -0.77758603],
                           [-0.78161016, -0.32035294],
                           [-0.74255992, -1.16008148],
                           [-1.0466031, 0.75005952],
                           [-0.44590052, -0.74899251],
                           [-0.9063831, 1.21194215],
                           [0.6852046, -1.25308019],
                           [-0.92735922, -1.11294167],
                           [0.88500034, 1.08962302],
                           [-1.16728814, 0.22024091],
                           [-0.95495292, -1.53750461],
                           [-1.12220783, -0.76912816],
                           [0.8540115, 0.19294252],
                           [-0.73003442, -0.4952201],
                           [-1.01386827, 0.59674839],
                           [-0.72096007, -1.0967327],
                           [-0.91856095, 0.93730254],
                           [0.40070166, 0.43057353],
                           [-0.85387345, -0.59177455],
                           [0.55596801, 0.01709016],
                           [-1.13830806, 0.71741181],
                           [-1.03256254, -1.18248631],
                           [-1.01017087, 1.16985983],
                           [0.85249341, -0.05494635],
                           [-0.74363048, -1.30847934],
                           [-1.17283692, 1.58368837],
                           [-1.0120364, -1.91512238],
                           [-1.17326479, 1.23458184],
                           [0.71616099, 1.57433808],
                           [-0.9568168, 0.96446752],
                           [-0.84248713, -1.48687487],
                           [-0.7931912, 0.74215694],
                           [0.43968008, -0.62420879],
                           [-0.96013389, -0.96211351],
                           [0.78511489, 1.16364004],
                           [-1.14415195, 0.91608585],
                           [-0.88023165, -1.07752342],
                           [-1.08403614, 0.80059941],
                           [0.91582591, -0.28235425],
                           [-1.09949241, -0.92932116],
                           [-1.34557527, 0.3045375],
                           [-1.14743668, -1.3552183],
                           [-1.18194743, 0.89044173],
                           [1.15875546, 1.31743638]])

    expected_ev = np.array([1.11314672e-02, 1.56628035e-03])

    P_, D_, Q_, ev_ = gsvd(X_, M, A, 2)

    np.testing.assert_almost_equal(P_, expected_P)
    np.testing.assert_almost_equal(D_, expected_D)
    np.testing.assert_almost_equal(Q_, expected_Q)
    np.testing.assert_almost_equal(ev_, expected_ev)


def test_affinity_input_mem_crossp():
    X = get_wine_data()

    expected_output = np.array([[0.08322031, 0.07873187, 0.02029389, 0.06721039, -0.10552513,
                                 -0.0752966, -0.06602462, -0.07080466, 0.06387896, 0.00156672,
                                 0.03160436, -0.0288555],
                                [0.07873187, 0.12556325, 0.00975387, 0.06140265, -0.1130203,
                                 -0.11730317, -0.04872108, -0.07443497, 0.07884756, -0.02077682,
                                 0.04815599, -0.02819884],
                                [0.02029389, 0.00975387, 0.00824081, 0.01471966, -0.02322451,
                                 -0.00676288, -0.02077659, -0.0203192, 0.00914527, 0.00745071,
                                 0.00530592, -0.00382694],
                                [0.06721039, 0.06140265, 0.01471966, 0.07318565, -0.10705922,
                                 -0.06668786, -0.04327402, -0.06078926, 0.06559376, -0.02198339,
                                 0.0417733, -0.02409165],
                                [-0.10552513, -0.1130203, -0.02322451, -0.10705922, 0.17246554,
                                 0.11760332, 0.06742129, 0.11092472, -0.09522173, 0.02913894,
                                 -0.08060365, 0.02710072],
                                [-0.0752966, -0.11730317, -0.00676288, -0.06668786, 0.11760332,
                                 0.1226546, 0.03946078, 0.0698447, -0.0756267, 0.02835997,
                                 -0.06085678, 0.02461062],
                                [-0.06602462, -0.04872108, -0.02077659, -0.04327402, 0.06742129,
                                 0.03946078, 0.0640798, 0.05147784, -0.0376811, -0.01609081,
                                 -0.01016547, 0.02029398],
                                [-0.07080466, -0.07443497, -0.0203192, -0.06078926, 0.11092472,
                                 0.0698447, 0.05147784, 0.09274855, -0.05096927, -0.01011871,
                                 -0.05094973, 0.01338999],
                                [0.06387896, 0.07884756, 0.00914527, 0.06559376, -0.09522173,
                                 -0.0756267, -0.0376811, -0.05096927, 0.07877819, -0.0213466,
                                 0.02268846, -0.03808679],
                                [0.00156672, -0.02077682, 0.00745071, -0.02198339, 0.02913894,
                                 0.02835997, -0.01609081, -0.01011871, -0.0213466, 0.07239179,
                                 -0.03768596, -0.01090586],
                                [0.03160436, 0.04815599, 0.00530592, 0.0417733, -0.08060365,
                                 -0.06085678, -0.01016547, -0.05094973, 0.02268846, -0.03768596,
                                 0.07441739, 0.01631617],
                                [-0.0288555, -0.02819884, -0.00382694, -0.02409165, 0.02710072,
                                 0.02461062, 0.02029398, 0.01338999, -0.03808679, -0.01090586,
                                 0.01631617, 0.03225411]])

    gen_affinity_input(X, type='cross_product')

    output = X[0].affinity_

    np.testing.assert_almost_equal(output, expected_output)


def test_get_ids():
    X = get_wine_data()

    expected_output = ['Sub-01', 'Sub-02', 'Sub-03', 'Sub-04', 'Sub-05', 'Sub-06', 'Sub-07', 'Sub-08', 'Sub-09',
                       'Sub-10']

    output = get_ids(X)

    assert output == expected_output


def test_get_groups():
    X = get_wine_data()

    for i in range(5):
        X[i].groups = ('A1', 'B1')

    for i in range(5, 10):
        X[i].groups = ('A1', 'B2')

    groups, ugroups, n_groupings = get_groups(X)

    expected_groups = np.array([['A1', 'B1'],
                                ['A1', 'B1'],
                                ['A1', 'B1'],
                                ['A1', 'B1'],
                                ['A1', 'B1'],
                                ['A1', 'B2'],
                                ['A1', 'B2'],
                                ['A1', 'B2'],
                                ['A1', 'B2'],
                                ['A1', 'B2']])

    expected_ugroups = [np.array(['A1']), np.array(['B1', 'B2'])]

    for i, g in enumerate(groups):
        assert (g == expected_groups[i]).all()

    for i, g in enumerate(ugroups):
        assert (g == expected_ugroups[i]).all()

    np.testing.assert_almost_equal(n_groupings, 2)


def test_factor_scores():
    X = get_wine_data()
    n_obs = X[0].data.shape[0]
    M = get_M(n_obs)
    X_, _ = stack_tables(X, 10)
    table_weights, _ = aniso_c1(X_, M)
    A = get_A_ANISOSTATIS(table_weights)
    P_, D_, _, _ = gsvd(X_, M, A, 10)

    expected_fs = np.array([[-0.11872877, 0.02190188, -0.00030441, -0.02212128, 0.00111479,
                             -0.00841704, 0.02089957, -0.03813448, 0.01324518, -0.01002568],
                            [-0.09277863, 0.00366001, -0.01522225, -0.02944542, 0.02381838,
                             0.01440877, -0.02433507, 0.00696606, -0.01977946, -0.01958803],
                            [-0.09001668, -0.04996413, -0.00165065, -0.00736855, -0.00067779,
                             0.02315847, 0.01511908, 0.00500948, -0.01669828, 0.01097002],
                            [-0.13368589, -0.02731637, 0.02700803, 0.02141683, -0.04621262,
                             0.01436159, -0.01023036, -0.00228347, 0.00322315, 0.00807695],
                            [0.16575074, -0.01736034, -0.00374439, -0.03792922, 0.01477782,
                             0.01506683, 0.01490713, -0.00115363, 0.0042094, 0.01908911],
                            [0.14387443, -0.00206955, 0.02333555, 0.04507234, 0.00818405,
                             -0.00303939, 0.01617926, -0.01256798, -0.02417222, -0.0117443],
                            [0.1042817, 0.02480209, -0.01589298, 0.02352331, 0.00520972,
                             0.03821069, -0.02359975, -0.00781309, 0.02113919, -0.00323684],
                            [0.10449149, 0.03730218, 0.04815023, -0.03426377, -0.0342656,
                             -0.01301708, -0.00523309, 0.01447899, 0.00042997, -0.00838079],
                            [-0.09194505, 0.03811878, 0.03854024, 0.01501405, 0.0437535,
                             -0.02099798, -0.0126463, 0.00456724, 0.00283655, 0.01904954],
                            [0.01521052, -0.08736075, -0.00243153, 0.0077604, 0.01398423,
                             -0.02478125, 0.00112264, 0.01456052, 0.02185553, -0.01373382],
                            [-0.05902079, 0.06047866, -0.04143685, 0.0173044, -0.00792401,
                             0.00052692, 0.02836015, 0.02774957, 0.00488496, -0.00231458],
                            [0.05256693, -0.00219245, -0.05635099, 0.0010369, -0.02176249,
                             -0.03548054, -0.02054325, -0.0113792, -0.01117396, 0.01183841]])

    fs = calc_factor_scores(P_, D_)

    np.testing.assert_almost_equal(fs, expected_fs)


def test_contrib_obs():
    X = get_wine_data()
    n_obs = X[0].data.shape[0]
    M = get_M(n_obs)
    X_, _ = stack_tables(X, 10)
    table_weights, _ = aniso_c1(X_, M)
    A = get_A_ANISOSTATIS(table_weights)
    P_, D_, Q_, ev_ = gsvd(X_, M, A, 10)

    fs = calc_factor_scores(P_, D_)

    expected_contrib = np.array([[1.05530570e-01, 2.55218361e-02, 8.84468889e-06,
                                  6.39422345e-02, 1.81755368e-04, 1.36218560e-02,
                                  1.14401232e-01, 4.69800699e-01, 6.90856868e-02,
                                  5.15502492e-02],
                                 [6.44409968e-02, 7.12711209e-04, 2.21161266e-02,
                                  1.13292953e-01, 8.29701731e-02, 3.99182513e-02,
                                  1.55103308e-01, 1.56766022e-02, 1.54064110e-01,
                                  1.96781740e-01],
                                 [6.06613825e-02, 1.32820738e-01, 2.60054261e-04,
                                  7.09464848e-03, 6.71865677e-05, 1.03118610e-01,
                                  5.98696612e-02, 8.10704270e-03, 1.09803447e-01,
                                  6.17189242e-02],
                                 [1.33794252e-01, 3.97004327e-02, 6.96205437e-02,
                                  5.99346252e-02, 3.12333517e-01, 3.96572608e-02,
                                  2.74118224e-02, 1.68449603e-03, 4.09103302e-03,
                                  3.34578741e-02],
                                 [2.05673008e-01, 1.60348808e-02, 1.33818052e-03,
                                  1.87981538e-01, 3.19387579e-02, 4.36476848e-02,
                                  5.82027964e-02, 4.29941642e-04, 6.97771277e-03,
                                  1.86885173e-01],
                                 [1.54964985e-01, 2.27877145e-04, 5.19741873e-02,
                                  2.65452953e-01, 9.79567013e-03, 1.77619444e-03,
                                  6.85603985e-02, 5.10280547e-02, 2.30094155e-01,
                                  7.07388418e-02],
                                 [8.14108958e-02, 3.27284731e-02, 2.41080567e-02,
                                  7.23043006e-02, 3.96941584e-03, 2.80728879e-01,
                                  1.45871588e-01, 1.97207718e-02, 1.75974225e-01,
                                  5.37334564e-03],
                                 [8.17387912e-02, 7.40317006e-02, 2.21283175e-01,
                                  1.53404331e-01, 1.71717333e-01, 3.25794875e-02,
                                  7.17253218e-03, 6.77258177e-02, 7.28036534e-05,
                                  3.60224921e-02],
                                 [6.32882479e-02, 7.73084903e-02, 1.41768709e-01,
                                  2.94552881e-02, 2.79977492e-01, 8.47759049e-02,
                                  4.18873774e-02, 6.73885539e-03, 3.16849634e-03,
                                  1.86111161e-01],
                                 [1.73202655e-03, 4.06052313e-01, 5.64300942e-04,
                                  7.86928792e-03, 2.86005455e-02, 1.18076573e-01,
                                  3.30092877e-04, 6.84907484e-02, 1.88102734e-01,
                                  9.67355627e-02],
                                 [2.60781301e-02, 1.94604801e-01, 1.63879622e-01,
                                  3.91273499e-02, 9.18305844e-03, 5.33828490e-05,
                                  2.10655550e-01, 2.48765691e-01, 9.39711598e-03,
                                  2.74756404e-03],
                                 [2.06867139e-02, 2.55746050e-04, 3.03078199e-01,
                                  1.40489746e-04, 6.92650948e-02, 2.42045916e-01,
                                  1.10533640e-01, 4.18312794e-02, 4.91684801e-02,
                                  7.18770728e-02]])

    contrib_obs = calc_contrib_obs(fs, ev_, M, D_, n_obs, 10)

    np.testing.assert_almost_equal(contrib_obs, expected_contrib)


def test_contrib_var():
    X = get_wine_data()
    n_obs = X[0].data.shape[0]
    M = get_M(n_obs)
    X_, _ = stack_tables(X, 10)
    table_weights, _ = aniso_c1(X_, M)
    A = get_A_ANISOSTATIS(table_weights)
    P_, D_, Q_, _ = gsvd(X_, M, A, 10)

    expected_contrib_var = np.array([[2.19538677e-02, 2.36238548e-02, 6.77011039e-04,
                                      4.95855783e-03, 1.48150296e-02, 1.75266963e-04,
                                      8.42154861e-03, 2.85220989e-04, 1.15724285e-02,
                                      3.08195130e-04],
                                     [1.47165860e-02, 1.49407326e-02, 8.58885665e-03,
                                      3.06267203e-02, 2.56421294e-02, 9.82058416e-03,
                                      1.46415776e-03, 1.67760190e-02, 1.21730454e-02,
                                      2.97008998e-02],
                                     [1.38580592e-02, 3.55426370e-02, 3.35943018e-03,
                                      9.08688721e-03, 1.76046065e-03, 3.17029220e-03,
                                      2.20225146e-02, 1.01274249e-03, 5.37887792e-02,
                                      6.80525330e-03],
                                     [8.80593469e-03, 6.33688528e-03, 6.37304936e-02,
                                      3.98936619e-04, 3.60280956e-03, 3.48599893e-03,
                                      3.47074825e-02, 3.05376001e-02, 1.40995996e-02,
                                      1.92393645e-02],
                                     [1.81991264e-02, 5.88568795e-03, 1.51151976e-02,
                                      2.96915271e-03, 1.26759755e-03, 4.11296451e-02,
                                      2.73201019e-02, 9.54819798e-03, 1.25408984e-02,
                                      6.06349758e-02],
                                     [8.80922567e-03, 1.10892629e-03, 1.56989579e-02,
                                      4.78350748e-02, 3.87010660e-02, 6.33887602e-04,
                                      5.91851700e-02, 1.15864193e-04, 4.40416738e-03,
                                      1.63901816e-02],
                                     [2.31332884e-02, 8.52538451e-03, 4.64303969e-04,
                                      1.66141556e-02, 1.78094162e-03, 3.44845215e-02,
                                      1.94179833e-02, 1.83800217e-04, 2.82111911e-04,
                                      5.07017762e-04],
                                     [2.22241726e-02, 1.22807023e-02, 2.04051110e-02,
                                      8.08282497e-05, 1.39869885e-02, 1.06891897e-04,
                                      5.39167071e-03, 8.48150160e-03, 7.59026690e-03,
                                      1.05425483e-02],
                                     [1.54858940e-02, 8.73147730e-03, 1.56482953e-04,
                                      9.33636584e-03, 7.21989894e-03, 1.19049375e-01,
                                      3.80033820e-04, 4.71129736e-04, 1.07029330e-02,
                                      6.46048617e-03],
                                     [1.17848312e-02, 9.66131322e-03, 2.36812992e-02,
                                      4.92495366e-02, 2.13068046e-02, 1.52723317e-02,
                                      4.05164263e-03, 7.84567361e-03, 1.76230772e-03,
                                      4.01470206e-03],
                                     [8.24773171e-03, 1.38551608e-03, 8.19841069e-02,
                                      5.59355547e-03, 2.92161710e-03, 2.12810909e-03,
                                      4.30469258e-04, 3.39015816e-03, 3.58154610e-02,
                                      2.19995489e-02],
                                     [6.81788295e-03, 1.66403907e-02, 1.11575143e-02,
                                      2.43123071e-02, 1.63428421e-02, 5.82842089e-03,
                                      2.58573676e-03, 8.42417993e-02, 5.32264567e-03,
                                      5.47468016e-02],
                                     [2.50593190e-02, 1.28705374e-02, 2.53340294e-03,
                                      6.12769335e-04, 1.94773602e-03, 3.06812503e-03,
                                      5.10057865e-07, 1.72807161e-02, 6.53999064e-03,
                                      6.89974943e-03],
                                     [1.03300219e-03, 2.91460856e-03, 2.68355601e-03,
                                      2.10396694e-02, 4.19169208e-02, 1.50692082e-03,
                                      5.40301613e-04, 6.70190158e-03, 9.75789646e-03,
                                      9.26870383e-03],
                                     [1.46779981e-02, 2.62426086e-02, 4.17117688e-02,
                                      9.03422160e-04, 1.19186490e-03, 7.55628937e-04,
                                      1.42919681e-03, 2.12171412e-03, 1.31614248e-04,
                                      9.42613594e-04],
                                     [5.02955505e-03, 1.68208039e-02, 4.63896545e-03,
                                      1.15508261e-03, 1.99253801e-02, 1.37165817e-02,
                                      7.44132938e-02, 1.22221841e-03, 7.08543894e-02,
                                      1.00745331e-02],
                                     [1.58244104e-02, 2.27916809e-02, 3.38333671e-03,
                                      1.17059733e-03, 1.06841923e-05, 5.14860509e-02,
                                      2.65192863e-03, 1.09783295e-02, 3.85262883e-02,
                                      1.02864492e-02],
                                     [1.32652829e-02, 2.01086162e-02, 1.65003753e-02,
                                      1.34226318e-02, 1.41122421e-02, 1.66169858e-02,
                                      1.01119912e-02, 3.40544603e-03, 2.82907062e-02,
                                      1.83380804e-02],
                                     [3.85251308e-02, 1.37146263e-03, 1.58968043e-05,
                                      4.78093547e-02, 2.44490383e-03, 5.62353312e-03,
                                      9.85564761e-03, 8.40690333e-03, 1.42267733e-03,
                                      1.33059035e-05],
                                     [1.82346307e-02, 4.72678564e-02, 6.93914567e-03,
                                      1.38750591e-04, 1.32909236e-03, 8.45189861e-02,
                                      3.01892513e-02, 2.97442749e-03, 9.66030282e-05,
                                      7.11328546e-03],
                                     [3.31769736e-02, 1.55843107e-02, 1.23002218e-03,
                                      7.07748713e-04, 6.97721882e-05, 7.45709455e-02,
                                      1.44763296e-02, 5.91907708e-05, 2.12727802e-02,
                                      6.08581582e-03],
                                     [1.15001320e-02, 5.86990810e-04, 3.16990084e-02,
                                      1.07779818e-04, 6.56363656e-02, 1.70313333e-02,
                                      1.58931632e-01, 2.28469051e-03, 2.55986201e-03,
                                      2.70366159e-02],
                                     [6.49845385e-03, 2.99033533e-03, 4.17819106e-02,
                                      7.14053299e-03, 1.28863739e-01, 1.39482586e-02,
                                      3.20988047e-03, 9.25727404e-04, 6.68916926e-04,
                                      1.50252441e-04],
                                     [2.20710344e-02, 7.64613824e-03, 9.60245492e-03,
                                      1.82247376e-03, 3.14622859e-04, 5.94271970e-04,
                                      2.79907758e-04, 1.35834292e-02, 1.04993626e-01,
                                      6.17155842e-03],
                                     [6.15300646e-03, 1.42385754e-02, 3.43258248e-02,
                                      1.39247883e-06, 2.84387396e-02, 8.33983563e-03,
                                      6.05774361e-02, 2.52696469e-03, 1.33871047e-02,
                                      5.24166942e-03],
                                     [1.51382623e-02, 1.57623023e-02, 4.40666082e-04,
                                      1.01251022e-02, 1.45561286e-02, 9.09391417e-03,
                                      7.81557331e-03, 1.62820731e-02, 8.97510961e-02,
                                      2.88395211e-02],
                                     [7.14113109e-04, 8.24554534e-04, 6.59792479e-03,
                                      2.84003861e-03, 4.65618217e-02, 3.31311188e-02,
                                      9.03536822e-04, 1.37879305e-03, 4.91687607e-04,
                                      1.93146152e-02],
                                     [1.14836271e-02, 5.51575059e-03, 1.86816760e-02,
                                      8.92327062e-02, 4.09705249e-04, 2.06948524e-03,
                                      1.28254239e-02, 2.76369446e-03, 6.40503741e-04,
                                      1.85002751e-02],
                                     [2.35631353e-03, 2.22651507e-06, 5.83236475e-02,
                                      3.82875480e-03, 1.53968104e-02, 1.83089619e-02,
                                      1.34691027e-02, 2.14092895e-03, 2.08361681e-02,
                                      1.84665331e-03],
                                     [3.50830762e-02, 1.39352603e-02, 1.05406402e-02,
                                      1.89408954e-03, 2.12191459e-02, 6.51038446e-03,
                                      2.39894650e-02, 8.28269158e-04, 8.42176182e-03,
                                      1.52262590e-02],
                                     [2.42382247e-02, 3.17877893e-02, 4.69121562e-03,
                                      3.20051990e-03, 2.42083391e-03, 4.65465931e-02,
                                      3.06602753e-02, 1.16546367e-02, 4.85545314e-02,
                                      4.26323172e-02],
                                     [2.22910831e-02, 2.98957291e-02, 1.18316880e-02,
                                      1.24628942e-03, 2.35398663e-02, 1.99965451e-02,
                                      2.09916665e-02, 6.04410108e-02, 4.16527744e-02,
                                      2.85078478e-02],
                                     [1.15364305e-02, 4.79255510e-05, 2.43533267e-02,
                                      1.15384355e-01, 4.04610821e-02, 3.85855415e-03,
                                      2.21359888e-03, 4.26595604e-02, 2.08807782e-02,
                                      2.28350356e-03],
                                     [6.95494188e-03, 2.15334133e-02, 1.22527061e-03,
                                      1.23755754e-03, 4.13792691e-02, 2.58685393e-02,
                                      1.21485064e-03, 2.22875283e-01, 1.26673017e-04,
                                      1.40279757e-05],
                                     [4.06097494e-02, 7.40447893e-02, 8.91837438e-03,
                                      3.83811977e-03, 9.32263190e-03, 1.31223460e-04,
                                      6.78772998e-02, 5.24751082e-03, 5.06581552e-05,
                                      1.94851836e-03],
                                     [2.34305111e-02, 8.39039787e-02, 3.94154972e-03,
                                      2.86638618e-02, 2.08568072e-02, 1.51244348e-02,
                                      7.61726307e-03, 5.36416471e-02, 3.10905336e-03,
                                      1.62303137e-01],
                                     [4.03283854e-02, 4.46538101e-02, 4.44804012e-03,
                                      4.97848007e-03, 8.63931776e-02, 6.18362890e-02,
                                      6.26743835e-03, 6.54064768e-04, 9.07459282e-03,
                                      2.34713101e-02],
                                     [6.58922642e-03, 3.18426434e-02, 4.47577227e-02,
                                      1.30777551e-01, 1.79664029e-02, 7.78344538e-03,
                                      1.15920544e-02, 8.57739451e-04, 1.46906788e-03,
                                      7.10501375e-03],
                                     [1.78474984e-02, 1.81340573e-02, 1.90693512e-02,
                                      7.61776855e-03, 1.32146856e-02, 6.84104025e-03,
                                      8.10630632e-03, 9.92686831e-03, 2.28875133e-02,
                                      5.86005631e-03],
                                     [1.12328633e-02, 3.49874878e-02, 2.40064625e-02,
                                      3.72550829e-03, 4.92621734e-05, 2.90592996e-02,
                                      1.12757823e-04, 2.27465484e-04, 1.48814848e-02,
                                      4.67230122e-03],
                                     [8.66329584e-03, 7.58435884e-03, 8.33728434e-03,
                                      5.51843613e-05, 1.16484189e-01, 1.02467837e-04,
                                      7.25725624e-03, 1.01902706e-02, 1.00411818e-02,
                                      7.15645699e-03],
                                     [9.85637315e-04, 1.98656744e-03, 1.48614935e-02,
                                      9.94488593e-03, 1.97415750e-02, 6.60173409e-04,
                                      4.35629946e-02, 2.89391258e-02, 1.34675983e-02,
                                      3.76240740e-03],
                                     [1.80241209e-02, 1.80985226e-02, 4.74495852e-03,
                                      6.38712711e-03, 4.37747105e-08, 1.75260684e-02,
                                      6.03091216e-02, 2.89649321e-02, 2.18624968e-04,
                                      1.25658264e-04],
                                     [8.45427346e-03, 1.85715083e-02, 2.07674153e-02,
                                      2.63818292e-02, 7.33766615e-03, 9.84551948e-03,
                                      7.14414819e-03, 3.90535203e-02, 3.75125811e-02,
                                      1.94634199e-02],
                                     [3.58829263e-02, 2.30034402e-02, 1.30721768e-03,
                                      1.24987368e-02, 5.55587634e-04, 1.48282650e-03,
                                      4.73642301e-04, 1.32943710e-03, 2.02809447e-02,
                                      3.95343865e-02],
                                     [1.32982721e-02, 1.99275861e-02, 7.45506702e-02,
                                      4.99411519e-03, 1.23990866e-03, 2.88666789e-02,
                                      6.53429730e-02, 3.00517690e-03, 6.00596532e-03,
                                      2.19273406e-05],
                                     [2.90415949e-02, 1.58403026e-02, 1.72019187e-02,
                                      8.86649462e-03, 2.97747426e-03, 3.12309674e-02,
                                      1.09775144e-03, 2.82805289e-02, 8.92599229e-02,
                                      6.32839982e-03],
                                     [1.50946295e-02, 1.43477986e-03, 2.21989757e-02,
                                      1.06759780e-01, 1.09650449e-03, 8.41544211e-03,
                                      1.94225064e-02, 6.96908881e-02, 8.79018661e-03,
                                      1.53933829e-02],
                                     [3.06935858e-02, 2.19277872e-02, 7.61513624e-03,
                                      3.14161894e-03, 7.39316182e-04, 7.30831885e-04,
                                      4.97527021e-05, 6.71316966e-04, 4.09300780e-02,
                                      1.22471121e-01],
                                     [6.78062495e-02, 3.47324405e-03, 2.17482951e-03,
                                      1.59035231e-02, 3.18709658e-03, 2.68752435e-03,
                                      1.37840738e-03, 7.87400829e-03, 1.95733659e-03,
                                      1.14083701e-02],
                                     [3.72274299e-02, 5.19306922e-02, 5.16882702e-02,
                                      4.87379260e-03, 5.75209819e-03, 8.48136435e-02,
                                      1.84648456e-03, 5.96960967e-05, 4.15393144e-03,
                                      1.85064413e-02],
                                     [4.14312250e-02, 2.35148637e-02, 7.86809899e-02,
                                      6.65121880e-02, 4.10666003e-04, 2.77571577e-05,
                                      2.29483001e-02, 1.14853278e-03, 6.88842018e-04,
                                      3.33473703e-04],
                                     [3.84769234e-02, 4.97365957e-02, 1.19788505e-02,
                                      2.79957372e-02, 3.11799937e-02, 3.87487977e-04,
                                      1.46422997e-03, 1.13851654e-01, 1.53073610e-02,
                                      5.39965894e-02]])

    contrib_var = calc_contrib_var(X_, Q_, A, 10)

    np.testing.assert_almost_equal(contrib_var, expected_contrib_var)


def test_contrib_dat():
    X = get_wine_data()
    n_obs = X[0].data.shape[0]
    M = get_M(n_obs)
    X_, _ = stack_tables(X, 10)
    table_weights, _ = aniso_c1(X_, M)
    A = get_A_ANISOSTATIS(table_weights)
    P_, D_, Q_, ev_ = gsvd(X_, M, A, 10)

    ids = get_ids(X)
    groups, ugroups, _ = get_groups(X)

    col_indices_, _ = get_col_indices(X, ids, groups, ugroups)

    contrib_var = calc_contrib_var(X_, Q_, A, 10)

    expected_contrib_dat = np.array([[0.0863428, 0.08743872, 0.10716995, 0.09587533, 0.08578909,
                                      0.05841567, 0.15312098, 0.05827564, 0.10857892, 0.13307887],
                                     [0.0876938, 0.05722478, 0.13784882, 0.10518675, 0.06355909,
                                      0.17686965, 0.03225754, 0.10461406, 0.06147573, 0.0982711],
                                     [0.07488957, 0.10174886, 0.07145141, 0.03830417, 0.07910483,
                                      0.08715029, 0.08914722, 0.04171033, 0.15410089, 0.05581013],
                                     [0.10793532, 0.06780096, 0.08166598, 0.05590417, 0.19834387,
                                      0.19569306, 0.21666274, 0.01465094, 0.02602084, 0.04039928],
                                     [0.05791636, 0.04398955, 0.12797219, 0.10785047, 0.10567783,
                                      0.07153759, 0.09587098, 0.03867588, 0.23010019, 0.07991429],
                                     [0.10010376, 0.09720012, 0.05264214, 0.12296281, 0.1290202,
                                      0.10278062, 0.07906986, 0.33845876, 0.11963652, 0.08866396],
                                     [0.11095787, 0.23444522, 0.06206569, 0.16825801, 0.13453902,
                                      0.08487539, 0.09335406, 0.06040096, 0.01370337, 0.19482798],
                                     [0.06520769, 0.0993625, 0.09178697, 0.0541123, 0.15682742,
                                      0.06403457, 0.12649258, 0.11730218, 0.09900898, 0.0410403],
                                     [0.12401101, 0.0821339, 0.12287392, 0.13626075, 0.00660879,
                                      0.07072675, 0.08638663, 0.10297735, 0.1652671, 0.18374922],
                                     [0.18494183, 0.1286554, 0.14452294, 0.11528524, 0.04052985,
                                      0.08791641, 0.02763742, 0.12293389, 0.02210747, 0.08424487]])

    contrib_dat = calc_contrib_dat(contrib_var, col_indices_, 10, 10)

    np.testing.assert_almost_equal(contrib_dat, expected_contrib_dat)


def test_partial_inertia():
    X = get_wine_data()
    n_obs = X[0].data.shape[0]
    M = get_M(n_obs)
    X_, _ = stack_tables(X, 10)
    table_weights, _ = aniso_c1(X_, M)
    A = get_A_ANISOSTATIS(table_weights)
    P_, D_, Q_, ev_ = gsvd(X_, M, A, 10)

    ids = get_ids(X)
    groups, ugroups, _ = get_groups(X)

    col_indices_, _ = get_col_indices(X, ids, groups, ugroups)

    contrib_var = calc_contrib_var(X_, Q_, A, 10)
    contrib_dat = calc_contrib_dat(contrib_var, col_indices_, 10, 10)

    expected_output = np.array([[9.61122047e-04, 1.36953555e-04, 9.35707665e-05,
                                 6.11446301e-05, 4.88824960e-05, 2.53180792e-05,
                                 4.87188964e-05, 1.50323861e-05, 2.29769222e-05,
                                 2.16234225e-05],
                                [9.76160671e-04, 8.96300548e-05, 1.20356685e-04,
                                 6.70830013e-05, 3.62158755e-05, 7.66575034e-05,
                                 1.02634637e-05, 2.69855270e-05, 1.30091826e-05,
                                 1.59676560e-05],
                                [8.33630767e-04, 1.59367233e-04, 6.23846791e-05,
                                 2.44285415e-05, 4.50738121e-05, 3.77720197e-05,
                                 2.83642020e-05, 1.07593099e-05, 3.26100508e-05,
                                 9.06835178e-06],
                                [1.20147849e-03, 1.06195305e-04, 7.13030930e-05,
                                 3.56529633e-05, 1.13016041e-04, 8.48158017e-05,
                                 6.89361441e-05, 3.77925599e-06, 5.50639858e-06,
                                 6.56430732e-06],
                                [6.44694029e-04, 6.88999640e-05, 1.11733342e-04,
                                 6.87817921e-05, 6.02150678e-05, 3.10052792e-05,
                                 3.05035176e-05, 9.97656594e-06, 4.86926390e-05,
                                 1.29849352e-05],
                                [1.11430168e-03, 1.52242634e-04, 4.59621903e-05,
                                 7.84197108e-05, 7.35155145e-05, 4.45463957e-05,
                                 2.51578605e-05, 8.73065033e-05, 2.53168757e-05,
                                 1.44066309e-05],
                                [1.23512392e-03, 3.67206943e-04, 5.41899484e-05,
                                 1.07306791e-04, 7.66601311e-05, 3.67860495e-05,
                                 2.97027010e-05, 1.55806184e-05, 2.89983840e-06,
                                 3.16567739e-05],
                                [7.25857256e-04, 1.55629535e-04, 8.01397869e-05,
                                 3.45101998e-05, 8.93600294e-05, 2.77533776e-05,
                                 4.02464725e-05, 3.02584675e-05, 2.09517811e-05,
                                 6.66846470e-06],
                                [1.38042448e-03, 1.28644707e-04, 1.07282005e-04,
                                 8.69004877e-05, 3.76567931e-06, 3.06538506e-05,
                                 2.74858559e-05, 2.65633312e-05, 3.49729882e-05,
                                 2.98566328e-05],
                                [2.05867390e-03, 2.01510418e-04, 1.26183904e-04,
                                 7.35233292e-05, 2.30938501e-05, 3.81040655e-05,
                                 8.79346996e-06, 3.17111844e-05, 4.67827134e-06,
                                 1.36885932e-05]])

    partial_inertia_dat = calc_partial_interia_dat(contrib_dat, ev_)

    np.testing.assert_almost_equal(partial_inertia_dat, expected_output)


def test_partial_factor_scores():
    X = get_wine_data()
    n_obs = X[0].data.shape[0]
    M = get_M(n_obs)
    X_, X_scaled_ = stack_tables(X, 10)
    table_weights, _ = aniso_c1(X_, M)
    A = get_A_ANISOSTATIS(table_weights)
    P_, D_, Q_, ev_ = gsvd(X_, M, A, 10)

    ids = get_ids(X)
    groups, ugroups, _ = get_groups(X)

    col_indices_, _ = get_col_indices(X, ids, groups, ugroups)

    expected_pfs0 = np.array([[-0.59767953, 0.06612091, -0.03716886, 0.0131305, 0.28507455,
                               -0.27548022, -0.19304251, -0.19327211, 0.02549473, -0.59155622],
                              [-0.67708106, 0.32103911, -0.260947, -0.25677363, 0.48148887,
                               -0.01916955, -0.78826034, 0.1302825, 0.08347781, -0.66782885],
                              [-0.12261179, -0.06186306, -0.01523269, 0.07642928, 0.04448197,
                               -0.13937441, 0.11094846, -0.12189723, -0.05476009, -0.15247231],
                              [-0.54715273, 0.24569563, -0.01807207, 0.23468661, 0.09225999,
                               -0.09947745, -0.29487442, -0.12801924, 0.02562906, -0.2899597],
                              [0.89031249, -0.38185314, 0.31874661, -0.32474027, -0.21861025,
                               0.15978824, 0.51999837, 0.06834334, -0.03667426, 0.61993632],
                              [0.67504131, -0.41101304, 0.31760106, 0.18308748, -0.32221423,
                               -0.03712222, 0.80105198, -0.22705413, -0.21726243, 0.58120224],
                              [0.40287549, 0.11509629, -0.03622544, 0.03147493, -0.22899323,
                               0.36339396, -0.11800646, 0.29873466, 0.10566438, 0.50801348],
                              [0.57648911, -0.03462599, 0.36512381, -0.27856889, -0.29062495,
                               0.23411492, 0.16837243, 0.06694077, -0.07076638, 0.64196432],
                              [-0.53392262, 0.25198486, 0.14959471, 0.00469195, 0.32661313,
                               0.00176371, -0.57566118, -0.08463477, 0.09740145, -0.33064636],
                              [0.11154108, -0.56119018, 0.11533385, -0.02998986, 0.30093355,
                               -0.30083945, 0.44742373, -0.15923135, 0.31048942, -0.40374827],
                              [-0.36664712, 0.39673928, -0.57936854, 0.24986058, -0.17948313,
                               0.06033, -0.28603147, 0.22461192, -0.06733077, -0.13225155],
                              [0.18883538, 0.05386934, -0.31938541, 0.09671131, -0.29092626,
                               0.05207249, 0.20808141, 0.12519564, -0.20136291, 0.2173469]])

    partial_factor_scores = calc_partial_factor_scores(X_scaled_, Q_, col_indices_)

    np.testing.assert_almost_equal(partial_factor_scores[0, :, :], expected_pfs0)
